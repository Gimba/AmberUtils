#! /usr/bin/env python

# Copyright (c) 2017 Martin Rosellen

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


import sys
import argparse
import os

__author__ = 'Martin Rosellen'
__docformat__ = "restructuredtext en"

def main(argv):
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('pdb_unmutated', help='unmutated structure')
    parser.add_argument('trajin_unmutated', help='trajectory for unmutated structure')
    parser.add_argument('mutation', help='mutated structure')
    args = parser.parse_args()

    mutation = args.mutation
    trajin_unmutated = args.trajin_unmutated
    pdb_unmutated = args.pdb_unmutated

    unmutated_name = pdb_unmutated.split('.')[0]

    contact_muta_res_dat = unmutated_name + '_' + mutation + '_contacts.dat'
    contact_muta_res_cpptraj = unmutated_name + '_' + mutation + '.cpptraj'

    # generate cpptraj infile to get contacting residues of the selected/mutated residue
    with open(contact_muta_res_cpptraj, 'w') as f:
        f.write('nativecontacts :' + mutation + ' :1-5000 writecontacts ' + contact_muta_res_dat + ' distance 3.5 \ngo')

    # run cpptraj
    os.system('cpptraj -p ' + pdb_unmutated + ' -y ' + trajin_unmutated + ' -i ' + contact_muta_res_cpptraj)

    # get contact residues and occupancy of atoms for unmutated structure from contact_data file generated by cpptraj
    contact_residues = []

    with open(contact_muta_res_dat, 'r') as f:
        for line in f:
            if line[0] is not '#':
                # get extra residue contacts
                if "_:" + mutation + "@" not in line:
                    line = line.split(' ')
                    line = filter(None, line)
                    line = line[1].split("_")[1]
                    line = line.split('@')[0]
                    line = line.replace(':', '')
                    contact_residues.append(line)


    # store number/occupancy of mutation contacting atoms
    contact_atom_count = []
    for item in contact_residues:
        contact_atom_count.append([item, contact_residues.count(item)])

    contact_residues = list(set(contact_residues))
    # get contact count for mutated structure (not really necessary)

    # mutated = []
    #
    # with open(args.mutated, 'r') as f:
    #     for line in f:
    #         if line[0] is not '#':
    #             # get extra residue mutated
    #             if "_:23@" not in line:
    #                 line = line.split(' ')
    #                 line = filter(None, line)
    #                 line = line[1].split("_")[1]
    #                 line = line.split('@')[0]
    #                 line = line.replace(':', '')
    #                 mutated.append(line)
    #
    #
    # mutated_atoms = []
    # for item in residues:
    #     mutated_atoms.append([item, mutated.count(item)])
    # mutated = list(set(mutated))

    res_muta_contact_cpptraj = "contact_residues_" + mutation + ".cpptraj"

    # generate cpptraj to get contacts of residues in contact with the mutation
    contact_outfiles = []
    with open(res_muta_contact_cpptraj, 'w') as out:
        for item in contact_residues:
            contact_outfiles.append("contacts_" + item + ".dat")
            out.write("nativecontacts :" + item + " :1-5000 writecontacts contacts_" + item + ".dat distance 3.5 \n")
        out.write("go")

    os.system('cpptraj -p ' + pdb_unmutated + ' -i ' + res_muta_contact_cpptraj + ' -y ' + trajin_unmutated)

    # get total of atomic contacts of residues contacting the mutation

    # all_residue_contacts contains triples, first is the selected residue, second is a contacting residue,
    # and third the number of contacts between the two residues
    all_residue_contacts = []
    for contact_file in contact_outfiles:
        residue_contacts = []
        residue = contact_file.split('_')[1].split('.')[0]
        with open(contact_file, 'r') as f:
            for line in f:
                if line[0] is not '#':
                    # get extra residue contacts
                    if "_:" + residue + "@" not in line:
                        line = line.split(' ')
                        line = filter(None, line)
                        line = line[1].split("_")[1]
                        line = line.split('@')[0]
                        line = line.replace(':', '')
                        residue_contacts.append(line)

        residue_contact_atom_count = []
        for item in residue_contacts:
            residue_contact_atom_count.append([residue,item, residue_contacts.count(item)])
        all_residue_contacts.append(residue_contact_atom_count)
    
if __name__ == "__main__":
    main(sys.argv)
